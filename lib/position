if turtle then


os.loadAPI("lib/storelib")

-- position lib identifies positions relative to its home position.
-- home position may optionally be set as a absolute world position.
-- home position may be set manually, or implicitly on first load.
-- facing works similarly - facing 0 is the facing you have on home set,
-- facing 1 is to the right of that, etc (modulo 4)
-- FACING ALSO DEFINES THE X AND Z AXES FOR POSITION
-- +x axis is facing 0, +z is facing 1

-- for brevity's sake, we define the following shorthand types for use in this api:
--     position table / pos table : a table containing keys x, y and z mapping to respective coords

-- we monkey patch turtle movement functions (up, down, forward, back, turnLeft, turnRight)

store = storelib.open("db/position")

-- set the home position in absolute coords, and set current position relative to home.
-- args:
--     home: set absolute position table of the home position, nil if unknown
--     current: set position relative to new home, nil for default (0,0,0)
--     facing: set current facing, with the new 0 being the new home facing, nil for default (0)
-- example:
--     setHome(nil, nil, nil): set home to current position and facing, with unknown absolute coords
function setHome(home, current, facing)
	store.home = home
	store.current = current or {x=0, y=0, z=0}
	store.facing = facing or 0
end

if store.current == nil then
	setHome(nil, nil, nil)
end

-- shortcut
current = store.current


-- monkey patch movement fns
function moveFunc(name, on_success)
	-- name: move func in turtle.raw
	-- on_success: action to take after move
	local move = turtle.raw[name]
	return function ()
		if move() then
			on_success()
			return true
		end
		return false
	end
end
if not turtle.raw then
	turtle.raw = {
		up = turtle.up,
		down = turtle.down,
		forward = turtle.forward,
		back = turtle.back,
		turnLeft = turtle.turnLeft,
		turnRight = turtle.turnRight
	}
end
turtle.up = moveFunc("up", function() current.y = current.y + 1 end)
turtle.down = moveFunc("down", function() current.y = current.y - 1 end)
turtle.turnLeft = moveFunc("turnLeft", function() store.facing = (store.facing - 1) % 4 end)
turtle.turnRight = moveFunc("turnRight", function() store.facing = (store.facing + 1) % 4 end)
turtle.forward = moveFunc("forward", function()
	local axis, sign = getForwardAxis()
	current[axis] = current[axis] + sign
end)
turtle.back = moveFunc("back", function()
	local axis, sign = getForwardAxis()
	current[axis] = current[axis] - sign
end)


-- gets forward axis from current facing
-- returns two: "x" or "z", 1 or -1
function getForwardAxis()
	if store.facing == "0" then
		return "x", 1
	elseif store.facing == "1" then
		return "z", 1
	elseif store.facing == "2" then
		return "x", -1
	elseif store.facing == "3" then
		return "z", -1
	else
		assert(false, "Unknown value for facing: "..tostring(store.facing))
	end
end


-- Bulk move operation - move in x,y,z relative to current position.
-- Facing at the end is undefined (use setFacing to reliably set your next facing)
-- Returns nil on success or positon table of actual x,y,z moved before failure on failure
-- Args may be in two forms: as seperate x, y, z, or as a position table in first arg.
function move(x, y, z)
	-- table arg or seperate?
	local target
	if type(x) == "table" then
		target = x
	else
		target = {x=x, y=y, z=z}
	end
	-- set nils to 0
	if not target.x then target.x = 0 end
	if not target.y then target.y = 0 end
	if not target.z then target.z = 0 end
	-- algo: move x first, then z, then y. Break on blocked,
	-- sleep on fully blocked in all 3, fail after 3 sleeps
	local failures = 0
	while target.x ~= 0 or target.y ~= 0 or target.z ~= 0 do
		local blocked = true
		while target.x ~= 0 do
			setFacing((target.x > 0) and 0 or 2)
			if not turtle.forward() then break end
			target.x = target.x + ((target.x > 0 and -1 or 1))
			blocked = false
		end
		while target.z ~= 0 do
			setFacing((target.z > 0) and 1 or 3)
			if not turtle.forward() then break end
			target.z = target.z + ((target.z > 0 and -1 or 1))
			blocked = false
		end
		while target.y ~= 0 do
			local upOrDown = (target.y > 0) and turtle.up or turtle.down
			if not upOrDown() then break end
			target.y = target.y + ((target.y > 0 and -1 or 1))
			blocked = false
		end
		if blocked then
			failures = failures + 1
			if failures > 3 then return target end
			sleep(1)
		else
			failures = 0
		end
	end
	return nil
end

-- Set the facing to the given value, executing minimum turns required to reach it
function setFacing(target)
	local diff = (target - store.facing) % 4
	local turnFunc = turtle.turnRight
	if diff > 2 then
		diff = (-diff) % 4
		turnFunc = turtle.turnLeft
	end
	for i = 1, diff do
		turnFunc()
	end
	assert(tonumber(store.facing) == target, "setFacing failed to set facing correctly!")
end


-- move to given position relative to home
-- returns as per move()
function moveTo(x, y, z)
	local diff = {
		x = x - current.x,
		y = y - current.y,
		z = z - current.z,
	}
	return move(diff)
end

end --- if turtle
