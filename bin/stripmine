
args = {...}
store = storelib.open("db/stripmine")

if not store.target then
	store.target = {x=0, z=0}
end
target = store.target

function log(msg)
	if not logfile then
		fs.makeDir("logs")
		local path = "logs/stripmine"
		logfile = fs.open(path, (fs.exists(path) and "a" or "w"))
		assert(logfile, "could not open log file")
	end
	print(msg)
	logfile.writeLine(msg)
	logfile.flush()
end

WIDTH = tonumber(args[1]) or 16
CEILING = tonumber(args[2]) or 0
FUEL_LOWER_LIMIT = args[3] or 512

log("WIDTH = "..WIDTH)
log("CEILING = "..CEILING)
log("FUEL_LOWER_LIMIT = "..FUEL_LOWER_LIMIT)

if not store.goingDown then
	store.goingDown = true
end
function digColumn()
	local y
	if store.goingDown == "true" then
		log("digging column down")
		y = common.ninf
	else
		log("digging column up")
		y = CEILING
	end
	position.moveTo(nil, y, nil, {dig = true, stepCB = checkInv})
	log("finished column")
	store.goingDown = store.goingDown ~= "true"
end

-- check for fuel and at least one empty slot
function checkInv()
	log("checking inv")
	-- for empty
	haveEmpty = false
	for slot = 1, 16 do
		if turtle.getItemCount(slot) == 0 then
			haveEmpty = true
		end
	end
	if not haveEmpty then
		-- inventory is full, return home
		log("Inventory is full, returning home")
		local saved = position.current.copy()
		position.moveTo(0, 0, 0)
		log("waiting for empty inventory...")
		common.waitFor(function()
			for slot = 1, 16 do
				if turtle.getItemCount(slot) ~= 0 then
					return false
				end
			end
			return true
		end)
		position.moveTo(saved)
	end
	-- for fuel
	common.fuelSearch(FUEL_LOWER_LIMIT)
	if turtle.getFuelLevel() < homeDist() * 1.1 then
		log("low on fuel ("..turtle.getFuelLevel().."), going home")
		local saved = position.current.copy()
		position.moveTo(0, 0, 0)
		log("waiting for more fuel")
		common.waitFor(common.fuelSearch(FUEL_LOWER_LIMIT))
	end
end

function homeDist()
	return position.current.x + position.current.y + position.current.z
end

-- go to target (x,z), moving up around obstacles if needed
function goToTarget()
	while position.moveTo(target.x, nil, target.z, {dig = true, stepCB = checkinv}) do
		assert(not position.move(0, 1, 0, {dig = true, stepCB = checkinv}),
		       "failed to go to target or move up around obstacle")
	end
end


-- main loop
while true do
	log("going to column: "..target.x..", "..target.z)
	goToTarget()
	digColumn()
	target.z = target.z + 1
	if tonumber(target.z) > WIDTH then
		log("reached end of z row, returning")
		target.z = 1
		target.x = target.x + 1
	end
end
